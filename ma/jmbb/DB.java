package ma.jmbb;

import java.io.*;

import java.nio.file.*;

import java.util.zip.GZIPOutputStream;

// CXE: CPIO -> XZ -> ENCRYPTED
class DB {

	static final String DEFAULT_DB_FILENAME = "db.xml.gz";
	static final long DEFAULT_BLOCKSIZE_KIB = 32 * 1024;

	final Path        loc;
	final DBHeader    header;
	final DBBlocks    blocks;
	final DBPasswords passwords;
	final DBNewTimes  times;
	final int         xzPreset;
	final PrintfIO    o;

	DB(Path rootDir, PrintfIO o) throws MBBFailureException {	
		super();
		loc       = rootDir;
		header    = new DBHeader();
		blocks    = new DBBlocks();
		passwords = new DBPasswords();
		times     = new DBNewTimes();
		xzPreset  = getXZPreset();
		this.o    = o;
	}

	private static int getXZPreset() throws MBBFailureException {
		String xzEnv = System.getenv("JMBB_XZLEVEL");
		if(xzEnv == null) {
			return 8;
		}

		try {
			return Integer.parseInt(xzEnv);
		} catch(NumberFormatException ex) {
			throw new MBBFailureException("Could not read XZ " +
					"preset from JMBB_XZLEVEL.", ex);
		}
	}

	void initFromLoc() throws MBBFailureException {
		Path dbf = getDBFile();
		try {
			if(Files.exists(dbf)) {
				initFromLoc(dbf);
			} else {
				manualInit();
			}
		} catch(IOException ex) {
			throw new MBBFailureException(ex);
		}	
	}

	void initFromLoc(Path dbf) throws MBBFailureException, IOException {
		DBReader r = new DBReader(this, dbf, o);
		r.readDatabase();
	}

	Path getDBFile() {
		return loc.resolve(DEFAULT_DB_FILENAME);
	}

	// -- Manual initialization --------------------------------------------

	private void manualInit() throws IOException {
		o.printf("The directory does not contain a database.\n");
		o.printf("A new one is going to be created. Remember:\n");
		o.printf(" * The password is stored in plain text.\n");
		o.printf(" * The password is echoed back to the user.\n");
		o.printf(" * Leading and tailing spaces are stripped.\n");
		o.printf(" * Creating a new Database is time-consuming.\n");
		String passwordRaw = o.readLn("New password");
		DBPassword password = new DBPassword(passwordRaw);
		passwords.add(password);
		o.printf("Leaving interactive mode.\n");
	}

	// -- Database writing -------------------------------------------------

	void save() throws IOException {
		save(getDBFile());
	}

	void save(Path path) throws IOException {
		save(Files.newOutputStream(path));
	}

	void save(OutputStream outRaw) throws IOException {
		XMLWriter out = new XMLWriter(new GZIPOutputStream(outRaw));
		try {
			writeXMLHeader(out, "db");
			writeData(out);
			writeEnd(out);
		} catch(IOException ex) {
			throw ex;
		} finally {
			out.close();
		}
	}

	static void writeXMLHeader(XMLWriter out, String ele)
							throws IOException {
		out.txl("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		out.newLine();
		out.txl("<!DOCTYPE " + ele + " SYSTEM \"mbb_db.dtd\">");
		out.newLine();
		out.tol("<!-- ");
		out.txl(Args.APPLICATION_NAME + " database file, generated by");
		out.txl(Args.APPLICATION_NAME + " Copyright (c) " +
					Args.COPYRIGHT_YEARS + " Ma_Sys.ma.");
		out.txl("For further info send an e-mail to Ma_Sys.ma@web.de.");
		out.tcl("-->");
		out.newLine();
	}

	private void writeData(XMLWriter out) throws IOException {
		header.write(out);
		blocks.write(out);
		times.write(out);
		passwords.write(out);
	}

	private static void writeEnd(XMLWriter out) throws IOException {
		out.tcl("</db>");
	}

}
